<?php
/**
 * @file
 *
 * Main module code for Socrata Views
 */

/**
 * Implements hook_views_api
 */
function socrata_views_views_api() {
  return array(
    'version' => '3.0',
  );
}

/**
 * Implements hook_views_plugins().
 */
function socrata_views_views_plugins() {
  $plugins = array(
    'module' => 'socrata_views',
    'query' => array(
      'socrata_query' => array(
        'title' => t('Socrata Query'),
        'help' => t('Query will be run using the Socrata SODA API.'),
        'handler' => 'socrata_views_plugin_query',
        'parent' => 'views_plugin_query',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_menu
 */
function socrata_views_menu() {
  $items = array();

  // Main configuration settings page
  $items['socrata/views/test'] = array(
    'title' => 'Socrata Views Test',
    'description' => "Dev test page",
    'page callback' => '_socrata_views_page_test',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer socrata'),
    'file' => 'socrata_views.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_views_data
 */
function socrata_views_data() {
  $tables = array();

  // Load our available sources
  ctools_include('export');
  $sources = ctools_export_crud_load_all('socrata_sources');

  // Iterate over all available tables, provide definitions to Views
  foreach ($sources as $source_name => $source) {
    $group = $source->description;

    // Retrieve table schema
    $resp = socrata_query($source->endpoint, array('$limit' => 1), $source->app_token);
    if ($resp !== FALSE && !empty($resp['fields'])) {
      // Define basic table info
      $tables[$source_name] = array();
      $table = &$tables[$source_name];
      $table['table'] = array(
        'group' => $group,
        'title' => $source_name,
        'help' => "Field in {$source_name}",
      );

      // Stub out the base table information (key field will be extracted below)
      $table['table']['base'] = array(
        'title' => "Socrata: {$group}",
        'help' => $group,
        'query class' => 'socrata_query',
      );

      // Add fields to table
      foreach ($resp['fields'] as $field_name => $field_type) {
        $handlers = _socrata_views_handlers($field_name, $field_type);
        $table[$field_name] = array_merge_recursive(
          $handlers,
          array(
            'title' => $field_name,
            'help' => t('Field of type %field_type in table %dbname', array('%field_type' => $field_type, '%dbname' => $group)),
            'field' => array(
              'title' => $field_name,
            ),
          )
        );
      }

      // Add result id field
      if (isset($table[':id'])) {
        $table['table']['base']['field'] = ':id';
        $table['table']['base']['defaults'] = array(
          'field' => ':id',
        );
      }
    }
  }

  return $tables;
}

/**
 * Util function to map field handlers to Socrata field types
 *
 * http://dev.socrata.com/docs/datatypes
 */
function _socrata_views_handlers($name, $type) {
  // Default handlers we start off with; should work for any generic text field
  $handlers = array(
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
    ),
    'sort' => array(
    ),
    'argument' => array(),
    'relationship' => array(),
  );

  // Catch the special "meta_data" fields and override their types so they make sense
  if ('meta_data' == $type) {
    switch ($name) {
      case ':created_at':
      case ':updated_at':
        $type = 'timestamp';
        break;

      case ':id':
        $type = 'plaintext';
        break;

      default:
        $type = 'plaintext';
    }
  }

  // Now override defaults based on field type:
  switch($type) {
    case 'money':
    case 'number':
    case 'percent':
    case 'star':
      $handlers['field']['handler'] = 'views_handler_field_numeric';
      break;

    case 'checkbox':
    case 'linkeddataset':
      //$handlers['field']['handler'] = 'views_handler_field_boolean';
      break;

    case 'url': // Compound type: description, url
      $handlers['field']['handler'] = 'socrata_views_handler_field_url';
      break;

    case 'location': // Compound type: needs_recoding, longitude, latitude, human_address (JSON)
      $handlers['field']['handler'] = 'socrata_views_handler_field_location';
      break;

    case 'email':
      $handlers['field']['handler'] = 'socrata_views_handler_field_email';
      break;

    case 'datetime':
    case 'datetimewtimezone':
    case 'document': // Compound type: file_id, filename
    case 'flag':
    case 'formattedtext':
    case 'multiplechoice':
    case 'phone': // Compound type: phone_number, phone_type
    case 'photo':
    case 'plaintext':
    case 'timestamp':
      break;
  }

  return $handlers;
}
