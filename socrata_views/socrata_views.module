<?php
/**
 * @file
 *
 * Main module code for Socrata Views
 */

/**
 * Implements hook_views_api
 */
function socrata_views_views_api() {
  return array(
    'version' => '3.0',
  );
}

/**
 * Implements hook_views_plugins().
 */
function socrata_views_views_plugins() {
  $plugins = array(
    'module' => 'socrata_views',
    'query' => array(
      'socrata_query' => array(
        'title' => t('Socrata Query'),
        'help' => t('Query will be run using the Socrata SODA API.'),
        'handler' => 'socrata_views_plugin_query',
        'parent' => 'views_plugin_query',
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_views_data
 */
function socrata_views_data() {
  $tables = array();

  // Load our available sources
  ctools_include('export');
  $sources = ctools_export_crud_load_all('socrata_sources');

  // Iterate over all available tables, provide definitions to Views
  foreach ($sources as $source_name => $source) {
    $group = $source->description;

    // Retrieve table schema
    $dataset = socrata_dataset_from_endpoint($source->endpoint);
    $resp = socrata_query($source->endpoint, array('$limit' => 1), $source->app_token);
    if ($resp !== FALSE && !empty($resp['fields'])) {
      // Define basic table info
      $tables[$source_name] = array();
      $table = &$tables[$source_name];
      $table['table'] = array(
        'group' => $group,
        'title' => $source_name,
        'help' => "Field in {$source_name}",
      );

      // Stub out the base table information (key field will be extracted below)
      $table['table']['base'] = array(
        'title' => "Socrata: {$group}",
        'help' => $group,
        'query class' => 'socrata_query',
      );

      // Add fields to table
      foreach ($resp['fields'] as $field_name => $field_type) {
        $field_options = array(
          'dataset' => $dataset,
          'soda2_type' => $field_type,
        );
        $handlers = _socrata_views_handlers($field_name, $field_type, $field_options);
        $field_def = array_merge_recursive(
          $handlers,
          array(
            'title' => $field_name,
            'help' => t('Field of type %field_type in table %dbname', array('%field_type' => $field_type, '%dbname' => $group)),
            'field' => array(
              'title' => $field_name,
            ),
          )
        );

        $table[$field_name] = $field_def;
      }

      // Add result id field since we have to define at least one initial field
      if (isset($table[':id'])) {
        $table['table']['base']['field'] = ':id';
        $table['table']['base']['defaults'] = array(
          'field' => ':id',
        );
      }
    }
  }

  return $tables;
}

/**
 * Util function to map field handlers to Socrata field types
 *
 * http://dev.socrata.com/docs/datatypes
 */
function _socrata_views_handlers($name, $type, $options) {
  // Initialize field handlers array
  $handlers = array();

  // Catch the special "meta_data" fields and override their types based on field id so they make sense
  if ('meta_data' == $type) {
    switch ($name) {
      case ':created_at':
      case ':updated_at':
        $type = 'date';
        break;

      case ':id':
        $type = 'text';
        break;

      default:
        $type = 'text';
    }
  }

  // Now override defaults based on field type:
  switch($type) {
    case 'money':
    case 'percent':
    case 'stars':
      $handlers['field']['handler'] = 'views_handler_field_numeric';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      $handlers['filter']['handler'] = 'socrata_views_handler_filter_numeric_quoted';
      break;

    case 'number':
      $handlers['field']['handler'] = 'views_handler_field_numeric';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      $handlers['filter']['handler'] = 'socrata_views_handler_filter_numeric';
      break;

    case 'checkbox':
      $handlers['field']['handler'] = 'views_handler_field_boolean';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      break;

    case 'url': // Compound type: description, url
      $handlers['field']['handler'] = 'socrata_views_handler_field_url';
      break;

    case 'location': // Compound type: needs_recoding, longitude, latitude, human_address (JSON)
      $handlers['field']['handler'] = 'socrata_views_handler_field_location';
      break;

    case 'email':
      $handlers['field']['handler'] = 'socrata_views_handler_field_email';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      break;

    case 'document': // Compound type: file_id, filename
      $handlers['field']['handler'] = 'socrata_views_handler_field_document';
      break;

    case 'photo':
      $handlers['field']['handler'] = 'socrata_views_handler_field_photo';
      break;

    case 'phone': // Compound type: phone_number, phone_type
      $handlers['field']['handler'] = 'socrata_views_handler_field_phone';
      break;

    case 'html':
      $handlers['field']['handler'] = 'socrata_views_handler_field_html';
      break;

    case 'date':
      $handlers['field']['handler'] = 'views_handler_field_date';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      $handlers['filter']['handler'] = 'socrata_views_handler_filter_date';
      break;

    case 'calendar_date':
      $handlers['field']['handler'] = 'socrata_views_handler_field_calendar_date';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      $handlers['filter']['handler'] = 'socrata_views_handler_filter_date';
      break;

    case 'flag':
      $handlers['field']['handler'] = 'views_handler_field';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      break;

    case 'text':
      $handlers['field']['handler'] = 'views_handler_field';
      $handlers['field']['click sortable'] = TRUE;
      $handlers['sort']['handler'] = 'views_handler_sort';
      $handlers['filter']['handler'] = 'socrata_views_handler_filter_text';
      break;

    // Unsupported field types
    case 'drop_down_list':
    default:
      break;
  }

  // Add field options to each handler group that has been defined
  foreach ($handlers as $group => &$info) {
    $info += $options;
  }

  return $handlers;
}
