<?php
/**
 * @file
 *
 * Main code for Socrata module
 */

/**
 * Implements hook_ctools_plugin_api
 */
function socrata_ctools_plugin_api($module, $api) {
  if ($module == 'socrata' && $api == 'socrata') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory
 */
function socrata_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_permission
 */
function socrata_permission() {
  return array(
    'administer socrata' => array(
      'title' => t('Administer Socrata integration'),
      'description' => t('Perform administration tasks for Socrata integration'),
    ),
  );
}

/**
 * General-purpose query function
 *
 * @param endpoint
 * @param app_token
 *
 * @return FALSE on error, nested array containing 'headers', 'fields' and 'data'
 */
function socrata_query($endpoint, $params = array(), $app_token = NULL) {
  $retval = FALSE;

  // Prepare authorization headers
  if (!$params) {
    $params = array();
  }
  if (!empty($app_token)) {
    $params['$$app_token'] = $app_token;
  }

  // Construct URL
  $soda_url = url($endpoint, array('query' => $params, 'absolute' => TRUE));

  // Create a new cURL resource
  $ch = curl_init();
  if ($ch) {
    // Pull and set custom curl options
    $curlopts = variable_get('socrata_curl_options', array());
    drupal_alter('socrata_curl_options', $curlopts);
    curl_setopt_array($ch, $curlopts);

    // Set required curl options
    $req_curlopts = array(
      CURLOPT_HEADER => TRUE,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_URL => $soda_url,
      CURLOPT_CUSTOMREQUEST => 'GET',
    );
    curl_setopt_array($ch, $req_curlopts);

    // Execute the request and cleanup
    curl_setopt_array($ch, $curlopts);
    $resp = curl_exec($ch);
    if (FALSE !== $resp) {
      // Pull info from response and see if we had an error
      $info = curl_getinfo($ch);
      if ($info['http_code'] >= 400) {
      }
      else {
        // Split out response headers into name => value array
        list($headers, $data) = explode("\r\n\r\n", $resp, 2);
        $headers = explode("\r\n", $headers);
        foreach ($headers as $header) {
          if ('HTTP' == substr($header, 0, 4)) {
            continue;
          }
          list($name, $value) = explode(':', $header, 2);
          $name = strtolower(trim($name));
          if (in_array($name, array('x-soda2-fields', 'x-soda2-types'))) {
            $retval['headers'][$name] = json_decode($value);
          }
          else {
            $retval['headers'][$name] = trim($value);
          }
        }

        // Generate an array mapping fields to types, if provided
        if (isset($retval['headers']['x-soda2-fields']) && isset($retval['headers']['x-soda2-types'])) {
          foreach ($retval['headers']['x-soda2-fields'] as $idx => $name) {
            $retval['fields'][$name] = $retval['headers']['x-soda2-types'][$idx];
          }
        }

        // Decode data payload
        $retval['data'] = json_decode($data, TRUE);
      }
    }
    else {
      // TODO Handle curl_exec error
    }

    // Close and cleanup
    curl_close($ch);
  }
  else {
    // TODO Handle curl_init error
  }

  return $retval;
}

/**
 * Util function to split out the dataset identifier from an endpoint URL
 */
function socrata_dataset_from_endpoint($endpoint) {
  $dataset = '';
  $path = parse_url($endpoint, PHP_URL_PATH);
  if ($path) {
    $parts = explode('/', $path);
    if (!empty($parts)) {
      $tmp = explode('.', array_pop($parts));
      if (!empty($tmp)) {
        $dataset = $tmp[0];
      }
    }
  }

  return $dataset;
}

/**
 * Generates a watchdog log entry during debugging and tried to call dpm from
 * the devel module; when debugging is disabled, nothing happens.
 *
 * Set the config variable socrata_debug = TRUE to generate log output
 */
function _socrata_dbg($msg, $vars = array(), $link = NULL) {
  if (variable_get('socrata_debug', FALSE)) {
    watchdog('socrata', (is_array($msg) || is_object($msg)) ? '<pre>' . print_r($msg, TRUE) . '</pre>' : $msg, $vars, WATCHDOG_DEBUG, $link);
    if (function_exists('dpm')) {
      dpm((is_array($msg) || is_object($msg)) ? $msg : t($msg, $vars));
    }
  }
}

/**
 * Generates a watchdog log entry during execution of module
 */
function _socrata_log($msg, $vars = array(), $severity = WATCHDOG_INFO, $link = NULL) {
  // Catch passed-in objects or arrays and dump them accordingly
  if (!is_string($msg)) {
    $msg = print_r($msg, TRUE);
  }
  watchdog('socrata', $msg, $vars, $severity, $link);
}

