<?php
/**
 * @file
 * Main code for Socrata module
 */

use Drupal\Core\Url;

/**
 * Implements hook_ctools_plugin_api().
 */
function socrata_ctools_plugin_api($module, $api) {
  if ($module == 'socrata' && $api == 'socrata') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function socrata_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_permission().
 */
function socrata_permission() {
  return array(
    'administer socrata' => array(
      'title' => t('Administer Socrata integration'),
      'description' => t('Perform administration tasks for Socrata integration'),
    ),
  );
}

/**
 * Util function to split out the dataset components from an endpoint URL.
 */
function socrata_components_from_endpoint($endpoint) {
  $components = parse_url($endpoint);
  $dataset_id = '';
  $path = $components['path'];
  if ($path) {
    $parts = explode('/', $path);
    if (!empty($parts)) {
      $tmp = explode('.', array_pop($parts));
      if (!empty($tmp)) {
        $dataset_id = $tmp[0];
      }
    }
  }
  $components['dataset_id'] = $dataset_id;

  return $components;
}

/**
 * Create watchdog entry during debugging and try to call dpm from devel module.
 *
 * When debugging is disabled, nothing happens.
 *
 * Set the config variable socrata_debug = TRUE to generate log output
 *
 * @param array or object $msg
 * @param array $vars
 */
function _socrata_dbg($msg, $vars = array()) {
  if (!$vars) {
    $vars = array();
  }
  if (\Drupal::config('socrata.settings')->get('socrata_debug')) {
    \Drupal::logger('socrata')->debug((is_array($msg) || is_object($msg)) ? '<pre>' . print_r($msg, TRUE) . '</pre>' : $msg, []);
    if (\Drupal::moduleHandler()->moduleExists('devel')) {
      dpm((is_array($msg) || is_object($msg)) ? $msg : t($msg, $vars));
    }
  }
}

/**
 * Util function to resolve redirects.
 */
function _socrata_resolve_redirects($endpoint) {
  // Make sure we have a valid-looking endpoint.
  if (substr_compare($endpoint, '.json', -5)) {
    $endpoint .= '.json';
  }

  // Create a new cURL resource.
  $ch = curl_init();
  if ($ch) {
    // Pull and set custom curl options.
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/socrata.settings.yml and config/schema/socrata.schema.yml.
$curlopts = \Drupal::config('socrata.settings')->get('socrata_curl_options');

// Need to look at hook_socrata_curl_options_alter in D7 module.
//    \Drupal::moduleHandler()->alter('socrata_curl_options', $curlopts);
    curl_setopt_array($ch, $curlopts);

    // Set required curl options.
    $req_curlopts = array(
      CURLOPT_HEADER => TRUE,
      CURLOPT_RETURNTRANSFER => TRUE,
    );
    curl_setopt_array($ch, $req_curlopts);

    // Execute the request and cleanup.
    curl_setopt_array($ch, $curlopts);
    do {
      $url = Url::fromUri($endpoint, array('query' => array('$limit' => 1), 'absolute' => TRUE))->toString();

      curl_setopt($ch, CURLOPT_URL, $soda_url);
      $resp = curl_exec($ch);
      if (FALSE !== $resp) {
        // Pull info from response and see if we had an error.
        $info = curl_getinfo($ch);
        if ($info['http_code'] >= 400) {
          break;
        }
        else {
          // Split out response headers into name => value array.
          list($headers, $data) = explode("\r\n\r\n", $resp, 2);
          $headers = _socrata_parse_headers($headers);

          // Test for redirect in the event curl wasn't able
          // to automagically follow due to server config.
          if (!empty($headers['location'])) {
            $endpoint = $headers['location'];
          }
        }
      }
    } while (FALSE !== $resp && !empty($headers['location']));
  }

  return $endpoint;
}

/**
 * Util function to parse out HTTP response headers.
 */
function _socrata_parse_headers($headers) {
  $headers_arr = array();

  $headers = explode("\r\n", $headers);
  foreach ($headers as $header) {
    if ('HTTP' == substr($header, 0, 4)) {
      continue;
    }
    list($name, $value) = explode(':', $header, 2);
    $name = strtolower(trim($name));
    if (in_array($name, array('x-soda2-fields', 'x-soda2-types'))) {
      $headers_arr[$name] = json_decode($value);
    }
    else {
      $headers_arr[$name] = trim($value);
    }
  }

  return $headers_arr;
}
