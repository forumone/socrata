<?php

/**
 * @file
 * Main code for Socrata module.
 */

use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\socrata\Entity\Endpoint;

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * Dynamically adds the endpoints to the admin menu.
 */
function socrata_menu_links_discovered_alter(&$links) {
  $links['entity.endpoint.add_form'] = [
    'title' => new TranslatableMarkup('Add endpoint'),
    'route_name' => 'entity.endpoint.add_form',
    'parent' => 'entity.endpoint.collection',
    'weight' => -50,
  ];
  // Adding links to /admin/structure/socrata.
  foreach (socrata_get_endpoints() as $machine_name => $label) {
    $links['entity.endpoint.edit_form.' . $machine_name] = [
      'title' => $label,
      'route_name' => 'entity.endpoint.edit_form',
      'parent' => 'entity.endpoint.collection',
      'route_parameters' => [
        'endpoint' => $machine_name,
      ],
    ];
    if (\Drupal::moduleHandler()->moduleExists('devel')) {
      $links['entity.endpoint.devel_load.' . $machine_name] = [
        'title' => t('Devel'),
        'route_name' => 'entity.endpoint.devel_load',
        'parent' => 'entity.endpoint.edit_form.' . $machine_name,
        'route_parameters' => [
          'endpoint' => $machine_name,
        ],
      ];
    }
    $links['entity.endpoint.delete_form.' . $machine_name] = [
      'title' => new TranslatableMarkup('Delete'),
      'route_name' => 'entity.endpoint.delete_form',
      'parent' => 'entity.endpoint.edit_form.' . $machine_name,
      'route_parameters' => [
        'endpoint' => $machine_name,
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function socrata_endpoint_insert(Endpoint $endpoint) {
  if (\Drupal::moduleHandler()->moduleExists('admin_toolbar')) {
    // Force a router rebuild.
    \Drupal::service('router.builder')->rebuild();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function socrata_endpoint_delete(Endpoint $endpoint) {
  if (\Drupal::moduleHandler()->moduleExists('admin_toolbar')) {
    // Force a router rebuild.
    \Drupal::service('router.builder')->rebuild();
  }
}

/**
 * Return an associative array of endpoints.
 *
 * @return array
 *   An array with the machine-readable names as the keys, and human-readable
 *   titles as the values.
 */
function socrata_get_endpoints() {
  if ($endpoints = Endpoint::loadMultiple()) {
    foreach ($endpoints as $menu_name => $menu) {
      $endpoints[$menu_name] = $menu->label();
    }
    asort($endpoints);
  }
  return $endpoints;
}

/**
 * Create watchdog entry during debugging and try to call dpm from devel module.
 *
 * When debugging is disabled, nothing happens.
 *
 * Set the config variable socrata_debug = TRUE to generate log output
 *
 * @param array|object $msg
 *   Debug message.
 * @param array $vars
 *   Variables related to the message.
 */
function _socrata_dbg($msg, array $vars = []) {
  if (!$vars) {
    $vars = [];
  }
  if (\Drupal::config('socrata.settings')->get('socrata_debug')) {
    \Drupal::logger('socrata')->debug((is_array($msg) || is_object($msg)) ? '<pre>' . print_r($msg, TRUE) . '</pre>' : $msg, []);
    if (\Drupal::moduleHandler()->moduleExists('devel')) {
      dpm((is_array($msg) || is_object($msg)) ? $msg : t($msg, $vars));
    }
  }
}
